from aiogram import Router, types, F
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.state import StatesGroup, State

from database import User, Group, Boardgame
from handlers.States import States
from handlers import ask
from handlers import delete

router = Router()

def create_buttons(gameboards):
  answer = []
  for (game, ouner) in gameboards:
    answer.append([ask.button(ouner, game)])
  answer.append([delete.button()])
  return InlineKeyboardMarkup(inline_keyboard=answer)


@router.message(Command("view"))
async def catcher(message: types.Message):
  chat_type = message.chat.type
  if chat_type in ["group", "supergroup"]:
    group = Group.load_without_password(message.chat.id)
    gameboards = group.all_gameboards()
    buttons = create_buttons(gameboards)
    await message.answer(text="–í—Å–µ —Å–≤–æ–±–æ–¥–Ω—ã–µ –Ω–∞—Å—Ç–æ–ª—å–Ω—ã–µ –∏–≥—Ä—ã –≤ –≤–∞—à–µ–π –≥—Ä—É–ø–ø–µ:", reply_markup=buttons)
  else :
    buttons = [
      [
        InlineKeyboardButton(text="–¥—Ä—É–∑–µ–π", callback_data="view f"), 
      ],
      [
        InlineKeyboardButton(text="—Å–≤–æ–∏—Ö –∏–≥—Ä", callback_data="view myg"),
        InlineKeyboardButton(text="—Å–≤–æ–π –≤–∏—à–ª–∏—Å—Ç", callback_data="view myw")
      ],
      [
        InlineKeyboardButton(text="—Å–≤–æ–∏—Ö –≥—Ä—É–ø–ø —Å –±–æ—Ç–æ–º", callback_data="view gr")
      ],
      [InlineKeyboardButton(text="–≤–∏—à–ª–∏—Å—Ç –¥—Ä—É–≥–∞", callback_data="view wf")],
      [delete.button()]
    ]
    buttons = InlineKeyboardMarkup(inline_keyboard=buttons)
    answer = """–î–ª—è —Ç–æ–≥–æ —á—Ç–æ –±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏–≥—Ä—ã –≤ –≥—Ä—É–ø–ø–µ, –Ω–∞–ø–∏—à–∏–µ—Ç–µ /view —Ç–∞–º.\n–¢—É—Ç –≤—ã –º–æ–∂–µ—Ç –ø–æ—Å–º–æ—Ç–µ—Ä—Ç—å —Å–ø–∏—Å–æ–∫:"""
    await message.answer(answer, reply_markup=buttons)


@router.callback_query(F.data.regexp(r"^view f$"))
async def view_friends(callback: types.CallbackQuery):
  from_user = User.load(callback.from_user.id)
  answer = "–í–∞—à–∏ –¥—Ä—É–∑—å—è: "
  friends = from_user.get_friends()
  for obj in friends:
    answer += "\n" + obj.user.name + " –≤ –≥—Ä—É–ø–ø–µ " + obj.group.name
  await callback.message.edit_text(answer)



@router.callback_query(F.data.regexp(r"^view myg$"))
async def view_friends(callback: types.CallbackQuery):
  from_user = User.load(callback.from_user.id)
  answer = "–í–∞—à–∏ –∏–≥—Ä—ã: "
  games = from_user.get_games()
  for row in games :
    if row[1] is None :
      answer += "\n" + row[0] + " (—Å–≤–æ–±–æ–¥–Ω–∞)"
    else :
      answer += "\n" + row[0] + " y " + User.load_by_id(row[1]).name
  await callback.message.edit_text(answer)


@router.callback_query(F.data.regexp(r"^view myw$"))
async def view_friends(callback: types.CallbackQuery):
  from_user = User.load(callback.from_user.id)
  answer = "–í–∞—à –≤–∏—à–ª–∏—Å—Ç: "
  games = from_user.get_games(is_bought = False)
  buttons = []
  for row in games:
    buttons.append([
      InlineKeyboardButton(text=f"{row[0]}, —É–¥–∞–ª–∏—Ç—å üóëÔ∏è?", callback_data=f"delete game {row[3]}")
    ])
  buttons.append([delete.button()])
  buttons = InlineKeyboardMarkup(inline_keyboard=buttons)  
  await callback.message.edit_text(answer, reply_markup=buttons)


@router.callback_query(F.data.regexp(r"^view gr$"))
async def view_friends(callback: types.CallbackQuery):
  from_user = User.load(callback.from_user.id)
  answer = "–í–∞—à–∏ –≥—Ä—É–ø–ø—ã: "
  groups = from_user.get_groups()
  for row in groups :
    answer += "\n" + row[1]
  await callback.message.edit_text(answer)


@router.callback_query(F.data.regexp(r"^view wf$"))
async def view_friends(callback: types.CallbackQuery,  state: FSMContext):
  answer = "–í–≤–µ–¥–∏—Ç–µ –Ω–∏–∫ –¥—Ä—É–≥–∞:"
  await state.set_state(States.wrote_find_user)
  await callback.message.edit_text(answer)



@router.message(States.wrote_find_user)
async def view_friends(message: types.Message, state: FSMContext):
  username = message.text
  user = User.load_by_name(username)
  answer = ""
  if user is None:
    answer = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –Ω–∏–∫–æ–º {username} –Ω–µ –Ω–∞–π–¥–µ–Ω"
  else:
    games = user.get_games(is_bought = False)
    if len(games) == 0:
      answer = f"–í–∏—à–ª–∏—Å—Ç {user.name} –ø—É—Å—Ç–æ–π"
    else:
      answer = f"–í–∏—à–ª–∏—Å—Ç {user.name}:"
      for row in games :
        answer += "\n" + row[0]
    

  await state.clear()
  await state.set_state(None)
  await message.answer(answer)


